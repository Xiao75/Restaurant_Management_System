@model IEnumerable<Restaurant.Models.MenuItem>

@{
    ViewData["Title"] = "Tablet Menu";
}

<!-- 🔹 CSS for Floating Cart -->
<style>
    body {
        background: linear-gradient(to bottom right, #e6f5e9, #cce8d8);
        font-family: 'Segoe UI', sans-serif;
    }

    .menu-hamburger {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1100;
        background: #388e3c;
        color: #fff;
        border: none;
        border-radius: 4px;
        padding: 10px 12px;
        cursor: pointer;
        box-shadow: 0 2px 6px rgba(0, 0, 0, .15);
        transition: background .3s ease;
    }

        .menu-hamburger:hover {
            background: #2e7d32;
        }

    .menu-sidebar {
        position: fixed;
        top: -100%;
        right: 20px;
        width: 360px;
        max-height: 80vh;
        background: #ffffff;
        box-shadow: 0 8px 16px rgba(0, 128, 0, 0.2);
        border-radius: 10px;
        overflow-y: auto;
        transition: top 0.4s ease;
        z-index: 1050;
        display: flex;
        flex-direction: column;
    }

        .menu-sidebar.open {
            top: 80px;
        }

    .menu-sidebar-close {
        background: none;
        border: none;
        font-size: 1.3rem;
        line-height: 1;
        color: #66bb6a;
        cursor: pointer;
        position: absolute;
        top: 10px;
        right: 15px;
        transition: color 0.3s ease;
    }

        .menu-sidebar-close:hover {
            color: #2e7d32;
        }

    .menu-sidebar-header {
        padding: 1rem;
        font-weight: 600;
        font-size: 1.15rem;
        border-bottom: 1px solid #c8e6c9;
        color: #2e7d32;
        background-color: #e8f5e9;
        border-radius: 10px 10px 0 0;
    }

    .menu-sidebar-body {
        flex: 1 1 auto;
        padding: 1rem;
    }

    .menu-sidebar-footer {
        padding: 1rem;
        border-top: 1px solid #c8e6c9;
        text-align: right;
        background-color: #f1f8f5;
    }

    .menu-overlay {
        position: fixed;
        inset: 0;
        background: transparent !important;
        z-index: 1040;
        display: none;
    }

        .menu-overlay.show {
            display: none !important;
        }

    .toast.text-bg-success {
        background-color: #4caf50 !important;
        color: white;
    }

    .btn-close.red-bg {
        background-color: #c62828;
        color: white;
        border-radius: 50%;
        opacity: 1;
    }

    /* Buttons */

    .btn-green, .btn-primary {
        background-color: #388e3c;
        color: white;
        border-radius: 8px;
        border: none;
        font-weight: 600;
        transition: background-color 0.3s ease;
    }

        .btn-green:hover, .btn-primary:hover {
            background-color: #2e7d32;
            color: white;
        }

    .btn-warning {
        background-color: #81c784;
        border-color: #81c784;
        color: #2e7d32;
        font-weight: 600;
    }

        .btn-warning:hover {
            background-color: #66bb6a;
            border-color: #66bb6a;
            color: white;
        }

    .btn-green:focus,
    .btn-primary:focus {
        background-color: #388e3c; /* your original green */
        border-color: #388e3c;
        outline: none; /* kill the default blue outline */
    }

    /* Form controls */

    .form-select, .form-control {
        border-color: #a5d6a7;
        font-weight: 600;
        color: #2e7d32;
    }

        .form-select:focus, .form-control:focus {
            border-color: #66bb6a;
            box-shadow: 0 0 0 0.2rem rgba(102, 187, 106, 0.25);
            outline: none;
        }

    /* Card Titles & Badges */

    .card-title {
        color: #2e7d32;
        font-weight: 600;
    }

    .badge.bg-secondary {
        background-color: #81c784 !important;
        color: #1b5e20;
    }

    .badge.bg-danger {
        background-color: #c62828 !important;
        color: white;
    }

    /* Input Group Buttons */

    .input-group .btn-outline-secondary {
        border-color: #a5d6a7;
        color: #2e7d32;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

        .input-group .btn-outline-secondary:hover {
            background-color: #66bb6a;
            border-color: #66bb6a;
            color: white;
        }

</style>

<!-- 🔹 Toast -->
<div class="position-fixed top-0 end-0 p-3" style="z-index: 2000">
    <div id="cart-toast" class="toast align-items-center text-bg-success border-0" role="alert">
        <div class="d-flex">
            <div class="toast-body">Item added to cart!</div>
            <button type="button" class="btn-close red-bg me-2 m-auto"
                    data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

<!-- 🔹 Hamburger trigger -->
<button class="menu-hamburger" id="cart-toggle">
    <i class="bi bi-cart3"></i>
</button>

<!-- 🔹 Overlay backdrop -->
<div class="menu-overlay" id="menu-overlay"></div>

<!-- 🔹 Floating cart panel (FIXED) -->
<div class="menu-sidebar" id="cart-panel">
    <button class="menu-sidebar-close" onclick="closeSidebar()">×</button>
    <div class="menu-sidebar-header">Your Cart</div>
    <div class="menu-sidebar-body">
        @await Html.PartialAsync("TabletPartialCart", ViewBag.Cart as List<Restaurant.Models.ViewModels.CartItemViewModel>)
    </div>
    <div class="menu-sidebar-footer">
    </div>
</div>

<!-- 🔹 Page Heading -->
<div class="container mt-5">
    <h1 class="text-center mb-4">Restaurant Menu</h1>

    @if (TempData["Message"] != null)
    {
        <div class="alert alert-success text-center">@TempData["Message"]</div>
    }

    <!-- Category Filter -->
    <div class="mb-4 d-flex justify-content-end">
        <form method="get" asp-action="Index" asp-controller="TabletOrder" class="d-flex align-items-center">
            <label class="me-2 mb-0">Filter:</label>
            <select name="category" onchange="this.form.submit()" class="form-select w-auto">
                <option value="">All Categories</option>
                @foreach (var cat in ViewBag.Categories as List<string>)
                {
                    <option value="@cat" selected="@(cat == ViewBag.SelectedCategory ? "selected" : null)">@cat</option>
                }
            </select>
        </form>
    </div>

    <!-- Menu Grid -->
    <div class="row">
        @foreach (var item in Model)
        {
            <div class="col-md-4 mb-4">
                <div class="card h-100 shadow">
                    <img src="~/images/@item.ImagePath" class="card-img-top" alt="@item.Name" style="height:200px; object-fit:cover;" />
                    <div class="card-body">
                        <h5 class="card-title">@item.Name</h5>
                        <p class="card-text">@item.Description</p>
                        <p class="text-muted">@string.Format("{0:C}", item.Price ?? 0)</p>
                    </div>
                    <div class="card-footer text-center">
                        <form asp-controller="TabletOrder" asp-action="AddToCart" method="post" class="d-flex justify-content-between align-items-center add-to-cart-form">
                            <input type="hidden" name="itemId" value="@item.ItemId" />
                            <input type="number" name="quantity" value="1" min="1" class="form-control form-control-sm me-2" style="width: 60px;" />
                            <button type="submit" class="btn btn-primary btn-sm">Add</button>
                        </form>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        const toggleBtn = document.getElementById('cart-toggle');
        const sidebar = document.getElementById('cart-panel');
        const overlay = document.getElementById('menu-overlay');

        let cartOpen = false;

        function openSidebar() {
            sidebar.classList.add('open');
            overlay.classList.add('show');
            cartOpen = true;
        }
        function closeSidebar() {
            sidebar.classList.remove('open');
            overlay.classList.remove('show');
            cartOpen = false;
        }

        toggleBtn.addEventListener('click', () => cartOpen ? closeSidebar() : openSidebar());
        overlay.addEventListener('click', closeSidebar);

        // Refresh the floating cart
        function loadTabletCart() {
            fetch('/TabletOrder/GetTabletCart')
                .then(r => r.text())
                .then(html => {
                    document.querySelector('.menu-sidebar-body').innerHTML = html;
                });
        }

        document.addEventListener('DOMContentLoaded', () => {
            loadTabletCart();

            // AJAX AddToCart
            document.querySelectorAll('.add-to-cart-form').forEach(form => {
                form.addEventListener('submit', function (e) {
                    e.preventDefault();
                    const formData = new FormData(form);

                    fetch('/TabletOrder/AddToCart', {
                        method: 'POST',
                        body: formData
                    })
                    .then(res => {
                        if (res.ok) {
                            // Show toast
                            const toastEl = document.getElementById('cart-toast');
                            const toast = new bootstrap.Toast(toastEl);
                            toast.show();

                            // Refresh cart contents
                            loadTabletCart();
                        }
                    });
                });
            });
        });
    </script>
}
