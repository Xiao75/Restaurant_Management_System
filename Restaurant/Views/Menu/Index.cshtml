@model IEnumerable<Restaurant.Models.MenuItem>

@{
    ViewData["Title"] = "Our Menu";
    var categories = ViewBag.Categories as List<string>;
    var selectedCategory = ViewBag.SelectedCategory as string;
}

<!-- 🔹 CSS for Floating Cart -->
<style>
    body {
        background: linear-gradient(to bottom right, #e6f5e9, #cce8d8);
        font-family: 'Segoe UI', sans-serif;
    }

    .menu-hamburger {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1100;
        background: #388e3c;
        color: #fff;
        border: none;
        border-radius: 4px;
        padding: 10px 12px;
        cursor: pointer;
        box-shadow: 0 2px 6px rgba(0, 0, 0, .15);
        transition: background .3s ease;
    }

        .menu-hamburger:hover {
            background: #2e7d32;
        }

    .menu-sidebar {
        position: fixed;
        top: -100%;
        right: 20px;
        width: 360px;
        max-height: 80vh;
        background: #ffffff;
        box-shadow: 0 8px 16px rgba(0, 128, 0, 0.2);
        border-radius: 10px;
        overflow-y: auto;
        transition: top 0.4s ease;
        z-index: 1050;
        display: flex;
        flex-direction: column;
    }

        .menu-sidebar.open {
            top: 80px;
        }

    .menu-sidebar-close {
        background: none;
        border: none;
        font-size: 1.3rem;
        line-height: 1;
        color: #66bb6a;
        cursor: pointer;
        position: absolute;
        top: 10px;
        right: 15px;
    }

        .menu-sidebar-close:hover {
            color: #2e7d32;
        }

    .menu-sidebar-header {
        padding: 1rem;
        font-weight: 600;
        font-size: 1.15rem;
        border-bottom: 1px solid #c8e6c9;
        color: #2e7d32;
        background-color: #e8f5e9;
    }

    .menu-sidebar-body {
        flex: 1 1 auto;
        padding: 1rem;
    }

    .menu-sidebar-footer {
        padding: 1rem;
        border-top: 1px solid #c8e6c9;
        text-align: right;
        background-color: #f1f8f5;
    }

    .menu-overlay {
        position: fixed;
        inset: 0;
        background: rgba(0, 100, 0, 0.45);
        z-index: 1040;
        display: none;
    }

    #cartPanel.show {
        display: block;
    }

    .toast.text-bg-success {
        background-color: #4caf50 !important;
        color: white;
    }

    .btn-close.red-bg {
        background-color: #c62828;
        color: white;
        border-radius: 50%;
        opacity: 1;
    }

    .btn-green {
        background-color: #388e3c;
        color: white;
        border-radius: 8px;
    }

        .btn-green:hover {
            background-color: #2e7d32;
        }

    .form-select, .form-control {
        border-color: #a5d6a7;
    }

        .form-select:focus, .form-control:focus {
            border-color: #66bb6a;
            box-shadow: 0 0 0 0.2rem rgba(102, 187, 106, 0.25);
        }

    .card-title {
        color: #2e7d32;
        font-weight: 600;
    }

    .btn-primary {
        background-color: #388e3c;
        border-color: #388e3c;
    }

        .btn-primary:hover {
            background-color: #2e7d32;
            border-color: #2e7d32;
        }

    .btn-warning {
        background-color: #81c784;
        border-color: #81c784;
        color: #2e7d32;
        font-weight: 600;
    }

        .btn-warning:hover {
            background-color: #66bb6a;
            border-color: #66bb6a;
            color: white;
        }

    .badge.bg-secondary {
        background-color: #81c784 !important;
        color: #1b5e20;
    }

    .badge.bg-danger {
        background-color: #c62828 !important;
    }
</style>

<div class="position-fixed top-0 end-0 p-3" style="z-index: 2000">
    <div id="cart-toast" class="toast align-items-center text-bg-success border-0" role="alert">
        <div class="d-flex">
            <div class="toast-body">
                Item added to cart!
            </div>
            @*@<button type="button" class="btn-close btn-close-white me-2 m-auto"
                    data-bs-dismiss="toast" aria-label="Close"></button>*@
            <style>
                .btn-close.red-bg {
                    background-color: red;
                    color: ghostwhite
                    border-radius: 20%;
                    opacity: 1;
                }
            </style>

            <button type="button" class="btn-close red-bg me-2 m-auto"
                    data-bs-dismiss="toast" aria-label="Close"></button>

        </div>
    </div>
</div>


<!-- 🔹 Hamburger trigger -->
<button class="menu-hamburger" id="cart-toggle">
    <i class="bi bi-cart3"></i> 
</button>

<!--  Location panel --!>
<div class="menu-sidebar" id="location-panel">
    <button class="menu-sidebar-close" onclick="closeLocation()">×</button>
    <div class="menu-sidebar-header">Select Delivery Location</div>
    <div class="menu-sidebar-body">
        @if (User.Identity.IsAuthenticated)
        {
                <form method="post" asp-controller="Order" asp-action="SelectAddressAndCheckout">
                    <select name="addressId" class="form-select mb-3" required>
                        <option value="">Choose Address</option>
                        @foreach (var address in ViewBag.Addresses as List<Restaurant.Models.Address>)
                        {
                                <option value="@address.AddressID">
                                           @address.Label - @address.FullAddress

                                </option>
                        }
                    </select>
                    <button type="submit" class="btn btn-primary w-100">Confirm Address</button>
                </form>
                <a href="@Url.Action("Create", "Address")" class="btn btn-link w-100">Add New Address</a>
        }
        else
        {
                <a href="@Url.Action("Create", "Address")" class="btn btn-warning w-100">Add Delivery Address</a>
        }
    </div>
</div>


<!-- 🔹 Overlay backdrop -->
<div class="menu-overlay" id="menu-overlay"></div>

<!-- 🔹 Floating cart panel -->
<div class="menu-sidebar" id="cart-panel">
    <button class="menu-sidebar-close" onclick="closeSidebar()">×</button>
    <div class="menu-sidebar-header">Your Cart</div>
    <div class="menu-sidebar-body">
        <!-- /Menu/GetCart content will be injected here -->
        <p>Loading cart...</p>
    </div>
    <div class="menu-sidebar-footer">
        <!-- Optional footer like checkout button -->
    </div>
</div>

<!-- 🔹 Page Heading -->
<div class="container mt-5">
    <h1 class="text-center mb-4">Our Menu</h1>

    @if (TempData["Message"] != null)
    {
        <div class="alert alert-success text-center">@TempData["Message"]</div>
    }

    <!-- 🔹 Category Filter -->
    <div class="mb-4 d-flex justify-content-end">
        <!-- filter form -->
    </div>

    <!-- 🔹 Menu Grid -->
    <div class="container-fluid mt-4">
        <!-- menu items here -->
    </div>
</div>


@if (TempData["Message"] != null)
{
    <div class="alert alert-success text-center">@TempData["Message"]</div>
}

<!-- 🔹 Category Filter -->
<div class="mb-4 d-flex justify-content-end">
    <form method="get" asp-action="Index" class="d-flex align-items-center">
        <label class="me-2 mb-0">Filter:</label>
        <select name="category" onchange="this.form.submit()" class="form-select w-auto">
            <option value="">All Categories</option>
            @foreach (var cat in categories)
            {
                <option value="@cat" selected="@(cat == selectedCategory ? "selected" : null)">@cat</option>
            }
        </select>
    </form>
</div>

<!-- 🔹 Menu Grid -->
<div class="container-fluid mt-4">
    <div class="row">
        @foreach (var item in Model)
        {
            <div class="col-md-6 col-lg-4 mb-4">
                <div class="card h-100 shadow">
                    @if (!string.IsNullOrEmpty(item.ImagePath))
                    {
                        <img src="~/images/@item.ImagePath"
                             class="card-img-top"
                             alt="@item.Name"
                             style="height:200px; object-fit:cover;" />
                    }

                    <div class="card-body">
                        <h5 class="card-title">@item.Name</h5>
                        <p class="card-text">@item.Description</p>
                        <p class="text-muted">@string.Format("{0:C}", item.Price ?? 0)</p>
                        <span class="badge bg-secondary">@item.Category</span>

                        @if (!item.Available)
                        {
                            <span class="badge bg-danger ms-2">Out of Stock</span>
                        }
                    </div>

                    @if (item.Available)
                    {
                        <div class="card-footer text-center">
                            <div class="d-flex justify-content-between align-items-center">
                                <input type="number"
                                       id="qty-@item.ItemId"
                                       value="1"
                                       min="1"
                                       class="form-control form-control-sm me-2"
                                       style="width: 60px;" />
                                <button type="button" onclick="addToCart(@item.ItemId)" class="btn btn-primary btn-sm">
                                    Add to Order
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

<!-- 🔹 JavaScript -->
@section Scripts {
    <script>
        const toggleBtn = document.getElementById('cart-toggle');
        const sidebar = document.getElementById('cart-panel');
        const overlay = document.getElementById('menu-overlay');

        function openSidebar() {
            sidebar.classList.add('open');
            overlay.classList.add('show');
        }

        function closeSidebar() {
            sidebar.classList.remove('open');
            overlay.classList.remove('show');
        }

        //toggleBtn.addEventListener('click', openSidebar);
                let cartOpen = false;

        toggleBtn.addEventListener('click', () => {
            cartOpen = !cartOpen;

            if (cartOpen) {
                openSidebar();
            } else {
                closeSidebar();
            }
        });

        // Also update closeSidebar to keep toggle working
        function closeSidebar() {
            sidebar.classList.remove('open');
            overlay.classList.remove('show');
            cartOpen = false;
        }

        overlay.addEventListener('click', closeSidebar);

        function loadCart() {
            fetch('/Menu/GetCart')
                .then(res => res.text())
                .then(html => {
                    const body = sidebar.querySelector('.menu-sidebar-body');
                    if (body) body.innerHTML = html;
                });
        }

                          function addToCart(itemId) {
            const qty = document.getElementById("qty-" + itemId).value || 1;

                 fetch('/Menu/AddToCart', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'same-origin',
            body: JSON.stringify({ itemId: itemId, quantity: parseInt(qty) })
        })
        .then(res => {
            if (res.ok) {
                loadCart();
                openSidebar();
                const toast = new bootstrap.Toast(document.getElementById('cart-toast'));
                toast.show();
            }
        });


        }


                // Cart action buttons logic for increase, decrease, remove
        document.body.addEventListener('click', async (e) => {
            if (e.target.classList.contains('cart-action')) {
                e.preventDefault();
                const itemId = e.target.getAttribute('data-id');
                const action = e.target.getAttribute('data-action');

                let url = '';
                switch (action) {
                    case 'increase':
                        url = '/Menu/IncreaseQuantity';
                        break;
                    case 'decrease':
                        url = '/Menu/DecreaseQuantity';
                        break;
                    case 'remove':
                        url = '/Menu/RemoveItem';
                        break;
                }

                if (url) {
                    await fetch(url, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                        body: `itemId=${itemId}`
                    });

                    loadCart();  // Refresh cart after action
                }
            }
        });

        // Ensure cart reloads after any change
             function loadCart() {
            fetch('/Menu/GetCart', {
                credentials: 'same-origin' 
            })
            .then(res => res.text())
            .then(html => {
                const body = sidebar.querySelector('.menu-sidebar-body');
                if (body) body.innerHTML = html;
            });
        }


        //location

                const locationBtn = document.getElementById('location-toggle');
        const locationPanel = document.getElementById('location-panel');

        locationBtn.addEventListener('click', () => {
            locationPanel.classList.add('open');
            overlay.classList.add('show');
        });

        function closeLocation() {
            locationPanel.classList.remove('open');
            overlay.classList.remove('show');
        }

        overlay.addEventListener('click', closeLocation);






        document.addEventListener("DOMContentLoaded", loadCart);
    </script>
}